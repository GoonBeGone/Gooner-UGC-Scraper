import tkinter as tkfrom tkinter import messageboxfrom PIL import Image, ImageTkimport requestsimport jsonimport base64import osimport timefrom io import BytesIO  # === GitHub Upload Config ===TOKEN = 'GithubPATHere'REPO_OWNER = 'RepoOwnerName'REPO_NAME = 'RepoName'FILE_PATH = 'FileName.json'GITHUB_API_URL = f'https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}'# === Load Items from Local JSON ===def load_local_items():    if not os.path.exists(FILE_PATH):        return []        with open(FILE_PATH, 'r', encoding='utf-8') as file:        try:            return json.load(file)        except json.JSONDecodeError:            return []items = load_local_items()reviewed_items = []current_index = 0# === Load Previously Reviewed Items ===def load_review_progress():    global reviewed_items    if os.path.exists("reviewed_items.json"):        try:            with open("reviewed_items.json", "r", encoding="utf-8") as file:                reviewed_items = json.load(file)        except json.JSONDecodeError:            reviewed_items = []load_review_progress()# === Remove Already Reviewed Items ===items = [item for item in items if item not in reviewed_items]# === Fetch Thumbnail from Roblox ===def fetch_image(item_id):    try:        url = f"https://thumbnails.roblox.com/v1/assets?assetIds={item_id}&assetType=Image&format=Png&size=150x150"        response = requests.get(url)        if response.status_code == 200:            data = response.json()            return data['data'][0]['imageUrl']        else:            print(f"Error fetching image for {item_id}: {response.status_code}")            return None    except Exception as e:        print(f"Error fetching image: {e}")    return None# === Save Reviewed Items to File ===def save_review_progress():    with open("reviewed_items.json", "w", encoding="utf-8") as file:        json.dump(reviewed_items, file, indent=4)# === Upload to GitHub ===def upload_to_github():    try:        updated_items = reviewed_items  # Upload reviewed items only        encoded_content = base64.b64encode(json.dumps(updated_items, indent=4).encode()).decode()        # Check if file exists on GitHub        response = requests.get(GITHUB_API_URL, headers={'Authorization': f'token {TOKEN}'})        sha = response.json().get('sha') if response.status_code == 200 else None        data = {            'message': 'Update roblox_items.json',            'content': encoded_content,            'branch': 'main'        }        if sha:            data['sha'] = sha  # Required for updating existing file        response = requests.put(GITHUB_API_URL, headers={'Authorization': f'token {TOKEN}'}, data=json.dumps(data))        if response.status_code in [200, 201]:            print('File uploaded successfully.')        else:            print(f'Failed to upload file: {response.text}')    except Exception as e:        print(f"Error uploading to GitHub: {e}")# === Review UI ===def load_item():    global current_index    if current_index >= len(items):        messagebox.showinfo("Review Complete", "All items reviewed.")        save_review_progress()        upload_to_github()        root.quit()        return    remaining_count = len(items) - current_index  # Remaining reviews    counter_label.config(text=f"Reviews Left: {remaining_count}")    item = items[current_index]    item_id = item["id"]    image_url = fetch_image(item_id)    if image_url:        response = requests.get(image_url)        if response.status_code == 200:            img = Image.open(BytesIO(response.content))            img = img.resize((image_label.winfo_width(), image_label.winfo_height()), Image.Resampling.LANCZOS)            img = ImageTk.PhotoImage(img)            image_label.config(image=img)            image_label.image = img        else:            print(f"Failed to load image for {item_id}, skipping image.")            image_label.config(image='', text="Image not found")    else:        image_label.config(image='', text="Image not found")    name_label.config(text=f"Name: {item['name']}")    price_label.config(text=f"Price: {item['price']} Robux")    creator_label.config(text=f"Creator: {item['creatorName']}")# === Accept Item ===def accept_item():    global current_index    reviewed_items.append(items[current_index])    save_review_progress()    current_index += 1    load_item()# === Decline Item ===def decline_item():    global current_index    del items[current_index]    save_review_progress()    load_item()# === Undo Action ===def undo():    global current_index    if reviewed_items:        last_item = reviewed_items.pop()        items.insert(current_index, last_item)        save_review_progress()        load_item()# === Skip Image Button (If Failed to Load) ===def skip_image():    global current_index    current_index += 1    load_item()# === Retry Fetching Image After 10 Seconds ===def retry_image():    time.sleep(10)    load_item()# === GUI Setup ===root = tk.Tk()root.title("Roblox Item Reviewer")# Change top bar colorroot.configure(bg="#111214")counter_label = tk.Label(root, text="Reviews Left: 0", bg="#333333", fg="white")counter_label.pack(fill=tk.X)image_label = tk.Label(root, text="Loading...", width=150, height=150, bg="#333333", fg="white")image_label.pack(fill=tk.BOTH, expand=True)name_label = tk.Label(root, text="Name:", bg="#333333", fg="white")name_label.pack(fill=tk.X)price_label = tk.Label(root, text="Price:", bg="#333333", fg="white")price_label.pack(fill=tk.X)creator_label = tk.Label(root, text="Creator:", bg="#333333", fg="white")creator_label.pack(fill=tk.X)# Buttons with new stylesaccept_button = tk.Button(root, text="Accept", command=accept_item, bg="#1e1f22", fg="white")accept_button.pack(side=tk.LEFT, padx=10, fill=tk.BOTH, expand=True)decline_button = tk.Button(root, text="Decline", command=decline_item, bg="#1e1f22", fg="white")decline_button.pack(side=tk.RIGHT, padx=10, fill=tk.BOTH, expand=True)undo_button = tk.Button(root, text="Undo", command=undo, bg="#1e1f22", fg="white")undo_button.pack(side=tk.BOTTOM, pady=10, fill=tk.X)skip_image_button = tk.Button(root, text="Skip Image", command=skip_image, bg="#1e1f22", fg="white")skip_image_button.pack(side=tk.BOTTOM, pady=10, fill=tk.X)retry_image_button = tk.Button(root, text="Retry in 10s", command=retry_image, bg="#1e1f22", fg="white")retry_image_button.pack(side=tk.BOTTOM, pady=10, fill=tk.X)# Print the console message with Discord invite and ASCII artprint("\nmade by critical ")print("join: gg/bKrcES6Rpk")print("""⠀⠀⠀⠀⠀⠀⢀⣤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⢤⣤⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡼⠋⠀⣀⠄⡂⠍⣀⣒⣒⠂⠀⠬⠤⠤⠬⠍⠉⠝⠲⣄⡀⠀⠀⠀⠀⠀⢀⡾⠁⠀⠊⢔⠕⠈⣀⣀⡀⠈⠆⠀⠀⠀⡍⠁⠀⠁⢂⠀⠈⣷⠀⠀⠀⠀⣠⣾⠥⠀⠀⣠⢠⣞⣿⣿⣿⣉⠳⣄⠀⠀⣀⣤⣶⣶⣶⡄⠀⠀⣘⢦⡀⢀⡞⡍⣠⠞⢋⡛⠶⠤⣤⠴⠚⠀⠈⠙⠁⠀⠀⢹⡏⠁⠀⣀⣠⠤⢤⡕⠱⣷⠘⡇⠇⣯⠤⢾⡙⠲⢤⣀⡀⠤⠀⢲⡖⣂⣀⠀⠀⢙⣶⣄⠈⠉⣸⡄⠠⣠⡿⠀⠹⣜⡪⠀⠈⢷⣦⣬⣏⠉⠛⠲⣮⣧⣁⣀⣀⠶⠞⢁⣀⣨⢶⢿⣧⠉⡼⠁⠀⠀⠈⢷⡀⠀⠀⠳⣌⡟⠻⠷⣶⣧⣀⣀⣹⣉⣉⣿⣉⣉⣇⣼⣾⣿⠀⡇⠀⠀⠀⠀⠈⢳⡄⠀⠀⠘⠳⣄⡀⡼⠈⠉⠛⡿⠿⠿⡿⠿⣿⢿⣿⣿⡇⠀⡇⠀⠀⠀⠀⠀⠀⠙⢦⣕⠠⣒⠌⡙⠓⠶⠤⣤⣧⣀⣸⣇⣴⣧⠾⠾⠋⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠶⣭⣒⠩⠖⢠⣤⠄⠀⠀⠀⠀⠀⠠⠔⠁⡰⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠲⢤⣀⣀⠉⠉⠀⠀⠀⠀⠀⠁⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠛⠒⠲⠶⠤⠴⠒⠚⠁⠀⠀""")# Load the first itemload_item()root.mainloop()